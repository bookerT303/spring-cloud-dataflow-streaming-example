import org.apache.tools.ant.taskdefs.condition.Os

class CompatibleExec extends Exec {
    def commandLine(String... arguments) {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            def newArguments = ["cmd", "/c"]
            newArguments.addAll(arguments)
            super.commandLine(*newArguments)
        } else {
            super.commandLine(arguments)
        }
    }
}

buildscript {
    ext {
        springBootVersion = "1.5.4.RELEASE"

        springVersion = "4.3.8.RELEASE"

        springOAuth2Version = "2.1.1.RELEASE"

        springDataRedisVersion = "1.8.3.RELEASE"

        springCloudServicesVersion = "1.4.1.RELEASE"
        springCloudVersion = "Dalston.SR1"
        springCloudContractVersion = "1.1.1.RELEASE"
        springCloudSsoVersion = "1.1.0.RELEASE"
        springCloudCoreVersion = "1.2.4.RELEASE"
        springCloudCommonsVersion = "1.2.2.RELEASE"

        springCloudNetflixCoreVersion = "1.3.1.RELEASE"

        hystrixVersion = "1.5.12"
        jacksonVersion = "2.8.8"
        junitVersion = "4.12"
        mysqlVersion = "6.0.4"
        h2Version = "1.4.196"
        springfoxVersion = "2.6.1"
        mockitoVersion = "2.7.22"
        javaxMailVersion = "1.4.7"
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath("gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE")
        classpath("org.codehaus.groovy:groovy-json:2.4.11")

    }
}

task deploy(type: CompatibleExec) {
    commandLine "cf", "push"
}

//apply from: "$rootDir/scripts/cfenv.gradle"

task generateDotGraph << {
    def dotGraph = ["digraph dependencies {"]

    project.subprojects.each { p ->
        def compileConf

        if (p.name.contains("simulator")) {
            return
        }

        try {
            compileConf = p.configurations.getByName("compile")
        } catch (UnknownConfigurationException e) {
            return
        }

        compileConf.dependencies.each { d ->
            if (!d.metaClass.respondsTo(d, "getDependencyProject")) {
                return
            }

            dotGraph.add "  \"$p.name\" -> \"${d.dependencyProject.name}\""
        }
    }

    dotGraph.add "}"

    project.buildDir.mkdirs()
    new File("$project.buildDir/dependencies.dot").write(dotGraph.join("\n"))
}

task generatePngGraph(dependsOn: generateDotGraph, type: CompatibleExec) {
    workingDir project.buildDir
    commandLine "dot", "-Tpng", "dependencies.dot", "-o", "dependencies.png"
}

subprojects {
    task showDependencies(type: DependencyReportTask)
}

apply from: "$rootDir/scripts/jacoco.gradle"