apply plugin: "java"
apply plugin: "com.github.hierynomus.license"
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.slf4j:jcl-over-slf4j:1.7.22"
    compile "ch.qos.logback:logback-classic:1.1.8"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.assertj:assertj-core:3.5.2"
}

apply from: "$rootDir/scripts/setup_env.gradle"

licenseMain.onlyIf { rootProject.file('LICENSE ').exists() }
licenseTest.onlyIf { rootProject.file('LICENSE ').exists() }

downloadLicenses {
    dependencyConfiguration "compile"
}

def validateLicense() {
    def result = exec {
        workingDir = "$rootDir"
        commandLine = ['license_finder', "--gradle-command=$rootDir/gradlew", "--project-path=$projectDir", "--decisions-file=$rootDir/doc/dependency_decisions.yml"]
        ignoreExitValue = true
    }
    assert result.exitValue == 0: 'license_finder found missing approvals'
}

assemble.doLast {
    if ('true' == System.env.LICENSE_FINDER_ENABLED) {
        validateLicense()
    }
}

ext.getGitUrl = {
    def gitFolder = "$rootDir/.git/"
    def configFile = new File(gitFolder + "config")
    if (configFile.exists()) {
        def config = configFile.readLines()
        for (String line : config) {
            def index = line.indexOf('url = ')
            if (index >= 0) {
                return line.substring(index + 6)
            }
        }
    }
    ''
}

ext.getCheckedOutGitCommitHash = {
    def gitFolder = "$rootDir/.git/"
    def takeFromHash = 12
    def head = new File(gitFolder + "HEAD").text.split(":")
    def isCommit = head.length == 1
    if(isCommit) return head[0].trim().take(takeFromHash)

    def refHead = new File(gitFolder + head[1].trim())
    refHead.text.trim().take takeFromHash
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport{
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco/html"
    }
    executionData = files('build/jacoco/jacocoTest.exec')
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}
test { finalizedBy jacocoTestReport }
